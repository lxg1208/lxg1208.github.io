<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>技术分享：Java 泛型</title>
      <link href="/2023/02/15/2023-02-15-java-basic-generics.html"/>
      <url>/2023/02/15/2023-02-15-java-basic-generics.html</url>
      
        <content type="html"><![CDATA[<h1>一、什么是泛型</h1><p>Java泛型（generics）是JDK 5.0 引入的一个新特性，可以在编译时进行类型安全检查。泛型本质是将类型参数化，在输入不同类型的情况下复用代码，可以消除一部分强制类型转换。最常见的使用场景就是容器类，如集合类（<code>java.util.Collection</code>）、<code>java.util.Optional</code>等。</p><a id="more"></a><p>引入泛型的意义在于：</p><ul><li><strong>适用于多种数据类型执行相同的代码（代码复用）；</strong></li></ul><p>如果没有泛型，当我们要实现不同类型数字的加法的时候，就需要为每种类型重载一个add方法；有了泛型以后，就可以合并成一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有泛型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有泛型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">    <span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用泛型前，list中可以放任意类型（Object），使用时需要判断</span></span><br><span class="line"></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"string"</span>);</span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> User());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (list.get(<span class="number">1</span>) <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">    Integer i = (Integer)list.get(<span class="number">1</span>); <span class="comment">// 需要强制类型转换</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型后，list中只能放String</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="number">100</span>); <span class="comment">// 编译时报错</span></span><br></pre></td></tr></table></figure><h1>二、泛型的使用</h1><p>泛型的使用主要有：泛型类、泛型接口、泛型方法三种方式。泛型类型参数一般用尖括号（&lt;&gt;）括起来，可以有多个，用逗号分割，如<code>&lt;T1, T2, ..., Tn&gt;</code>，常见的泛型参数名称有：</p><blockquote><ul><li>E - 元素 (常见于Java集合类)</li><li>K - 键</li><li>N - 数字</li><li>T - 任意类型</li><li>V - 值</li><li>S, U, V 等等</li></ul></blockquote><h2 id="2-1-泛型类">2.1 泛型类</h2><p>泛型类的泛型参数部分放在类名后边。可以用如下格式定义一个泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, ..., <span class="title">Tn</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>常见的泛型类如：<code>java.util.Optional</code>、<code>org.apache.commons.lang3.tuple.Pair</code>。一般在创建实例的时候指定泛型，使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Optional&lt;User&gt; optional = Optional.of(<span class="keyword">new</span> User());</span><br><span class="line"><span class="keyword">final</span> Pair&lt;Integer, User&gt; pair = <span class="keyword">new</span> Pair(<span class="number">1</span>, <span class="keyword">new</span> User());</span><br></pre></td></tr></table></figure><h2 id="2-2-泛型接口">2.2 泛型接口</h2><p>泛型接口的定义与泛型类的定义类似。常见的泛型接口有：<code>org.springframework.data.redis.core.RedisOperations&lt;K, V&gt;</code>、<code>java.util.stream.Stream</code>。使用方式有两种，一种是实现类依旧带泛型，在使用的时候指定；也可以在实现类中指定实际类，如：<code>org.springframework.data.redis.core.RedisTemplate&lt;K, V&gt;</code>、<code>org.springframework.data.redis.core.StringRedisTemplate</code>。</p><h2 id="2-3-泛型方法">2.3 泛型方法</h2><p>定义泛型方法时，需要在返回值的前边定义泛型，泛型可以用作返回值，也可以用作参数。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建指定类型的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 指定类型的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">               |  |                |     |</span><br><span class="line">               |  |                |     * ------ 泛型 T 的类对象</span><br><span class="line">               |  |                * ------------ 泛型 T 的具体类型</span><br><span class="line">               |  * ----------------------------- 方法返回值类型为 T</span><br><span class="line">               * -------------------------------- 声明次方法有一个泛型类型 T</span><br></pre></td></tr></table></figure><p>泛型方法一般用于工具类，如<code>com.fasterxml.jackson.databind.ObjectMapper</code>中的<code>public &lt;T&gt; T readValue(String content, Class&lt;T&gt; valueType) throws JsonProcessingException, JsonMappingException</code>、<code>java.util.Optional</code>中的静态方法等。在调用方法的时候将实际类型传入方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Optional&lt;User&gt; optional = Optional.of(<span class="keyword">new</span> User());</span><br><span class="line"><span class="keyword">final</span> User user = <span class="keyword">new</span> ObjectMapper().readValue(<span class="string">"&#123;\"id\":1,\"name\",\"张三\"&#125;"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-泛型的范围">2.4 泛型的范围</h2><p>有时候我们会遇到一些泛型的隐式转换问题，这就涉及到了泛型的上下边界，可以将泛型类限定为一个范围而不是一个特定的类，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">final</span> A a)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funList</span><span class="params">(<span class="keyword">final</span> List&lt;A&gt; a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">fun(b);  <span class="comment">// 可以正常调用</span></span><br><span class="line"><span class="keyword">final</span> List&lt;B&gt; bs = Arrays.asList(<span class="keyword">new</span> B());</span><br><span class="line">funList(bs);  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><h3 id="2-4-1-上下限">2.4.1 上下限</h3><p>我们可以通过指定泛型的上下限来限制类型范围，如只能传入某个类的父类或子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function">T <span class="title">add</span><span class="params">(<span class="keyword">final</span> T a, <span class="keyword">final</span> T b)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">final</span> List&lt;? <span class="keyword">super</span> String&gt; list)</span> </span>&#123;&#125;</span><br><span class="line">fun(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());  <span class="comment">// 报错</span></span><br><span class="line">fun(<span class="keyword">new</span> ArrayList&lt;&gt;());         <span class="comment">// 推断为String</span></span><br><span class="line">fun(<span class="keyword">new</span> ArrayList&lt;Object&gt;());   <span class="comment">// Object是String的父类</span></span><br></pre></td></tr></table></figure><p>小结<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&gt; 无限制通配符</span><br><span class="line">&lt;? extends E&gt; extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</span><br><span class="line">&lt;? super E&gt; super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用原则《Effictive Java》</span><br><span class="line">&#x2F;&#x2F; 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</span><br><span class="line">1. 如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</span><br><span class="line">2. 如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;；</span><br><span class="line">3. 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</span><br></pre></td></tr></table></figure><h3 id="2-4-2-多个限制">2.4.2 多个限制</h3><p>我们可以指定泛型同时满足多个类型，类型之间用<code>&amp;</code>连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可序列化并且支持快速随机访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Serializable</span> &amp; <span class="title">RandomAccess</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1>三、 深入泛型</h1><h2 id="3-1-泛型擦除">3.1 泛型擦除</h2><p>Java为了兼容旧版本，通过&quot;伪泛型&quot;的策略来实现，也就是语法上支持泛型，但是在编译期间进行检查，之后会进行&quot;类型擦除&quot;（Type Erasure），将泛型替换为具体的类型。泛型擦除的原则有：</p><blockquote><p>删除类型参数声明，即<code>&lt;&gt;</code>及其之间的内容；<br>根据泛型上下限推断并替换为实际类型，如果泛型为通配符<code>?</code>或者没有上限的，替换为<code>Object</code>，有上限的则根据子类替换原则取泛型最左边限定类型（即父类）；<br>必要时插入强制类型转换来保证类型安全；<br>为保证擦除后的代码仍具有泛型的&quot;多态性&quot;，可能会产生&quot;桥接方法&quot;。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 擦除前</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeErasure</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 擦除后</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeErasure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 擦除前</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeErasure</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 擦除后</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeErasure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Number value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Number <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-如何证明泛型擦除了">3.1.1 如何证明泛型擦除了</h3><p>通过查看字节码会发现，编译后的方法只有原始类型，而没有泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">final</span> T temp)</span> </span>&#123; ...... &#125;</span><br><span class="line"><span class="comment">// 编译后查看字节码方法表示为</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">fun</span><span class="params">(Ljava/lang/Number;)</span>V</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">final</span> T temp)</span> </span>&#123; ...... &#125;</span><br><span class="line"><span class="comment">// 编译后查看字节码方法表示为</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">fun</span><span class="params">(Ljava/lang/Object;)</span>V</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function"><span class="keyword">void</span> <span class="title">funNN</span><span class="params">(<span class="keyword">final</span> T temp)</span> </span>&#123;</span><br><span class="line">    System.out.println(temp + <span class="string">"-Number"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">funNN</span><span class="params">(<span class="keyword">final</span> T temp)</span> </span>&#123;</span><br><span class="line">    System.out.println(temp + <span class="string">"-Object"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.&lt;Number&gt;funNN(<span class="number">1</span>);</span><br><span class="line">Test.&lt;Integer&gt;funNN(<span class="number">2</span>);</span><br><span class="line">Test.&lt;String&gt;funNN(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="number">1</span>-Number</span><br><span class="line"><span class="number">2</span>-Number</span><br><span class="line"><span class="number">3</span>-Object</span><br></pre></td></tr></table></figure><p>由于泛型在编译期间就擦除了，所以在运行时，可以通过反射绕过泛型检测。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);  <span class="comment">// 这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer</span></span><br><span class="line">list.getClass().getMethod("add", Object.class).invoke(list, "asd");</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">asd</span><br></pre></td></tr></table></figure><h3 id="3-1-2-擦除后保留原始类型">3.1.2 擦除后保留原始类型</h3><p>泛型被擦除后，字节码中会使用对应的真实类型来表示，一般会使用限定的类型，如果没有限定，就用Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限定的类型是Number，则原始类型就是Number</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function">T <span class="title">add</span><span class="params">(<span class="keyword">final</span> T x, <span class="keyword">final</span> T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有限定，原始类型就是Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">add</span><span class="params">(<span class="keyword">final</span> T x, <span class="keyword">final</span> T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意区分原始类型和泛型变量类型，在调用泛型方法的时候，既可以指定泛型变量类型，也可以不指定。在指定的情况下，对应的参数只能是指定类及其子类，不指定的情况下，泛型变量的类型为参数的共同父类的最小级，直到Object（类似于最小公倍数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">add</span><span class="params">(<span class="keyword">final</span> T x, <span class="keyword">final</span> T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不指定泛型</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> i = Test.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 这两个参数都是Integer，所以T为Integer类型</span></span><br><span class="line"><span class="keyword">final</span> Number f = Test.add(<span class="number">1</span>, <span class="number">1.2</span>); <span class="comment">// 这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number</span></span><br><span class="line"><span class="keyword">final</span> Object o = Test.add(<span class="number">1</span>, <span class="string">"asd"</span>); <span class="comment">// 这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定泛型</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 指定了Integer，所以只能为Integer类型或者其子类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> b = Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">// 编译错误，指定了Integer，不能为Float</span></span><br><span class="line"><span class="keyword">final</span> Number c = Test.&lt;Number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">// 指定为Number，所以可以为Integer和Float</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3-编译期检查">3.1.3 编译期检查</h3><p>既然说泛型会在编译期擦除，那为什么当我们向一个String的List中添加Integer元素的时候会报错呢？泛型被擦除了，又是如何保证只能使用限定的类型的？</p><p>Java编译器在编译过程中，会先对泛型类型进行检查，然后将其擦除，最后再进行编译。这个检查只针对引用，不关注实际引用的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list1.add(<span class="string">"1"</span>); <span class="comment">// 编译通过</span></span><br><span class="line">list1.add(<span class="number">1</span>); <span class="comment">// 编译错误</span></span><br><span class="line">String str1 = list1.get(<span class="number">0</span>); <span class="comment">// 返回类型就是String</span></span><br><span class="line"></span><br><span class="line">List list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list2.add(<span class="string">"1"</span>); <span class="comment">// 编译通过</span></span><br><span class="line">list2.add(<span class="number">1</span>); <span class="comment">// 编译通过</span></span><br><span class="line">Object object = list2.get(<span class="number">0</span>); <span class="comment">// 返回类型就是Object</span></span><br></pre></td></tr></table></figure><p>上面第二个例子中List没有指定泛型，实际上相当于是Object，那么，我们可以指定为Object吗？答案是不可以。如果可以，泛型中的类型参数就都可以用Object表示，这样在用的时候就需要判断对象的真实类型是什么，并进行强制类型转换，但是，引入泛型的初衷不就是避免类型转换吗？</p><h3 id="3-1-4-泛型的多态-桥接方法">3.1.4 泛型的多态，桥接方法</h3><p>在继承中指定泛型类型的时候，泛型擦除会造成多态冲突，Java的解决方案是自动生成桥接方法。比如说我们有如下两个类A和B，B在继承A的同时指定泛型为Date，并且重写了A类中的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">final</span> T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">final</span> Date value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于A类会在编译期间将泛型擦除为Object，所以A类编译后就会变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，子类中的<code>getValue</code>是一种普遍的写法，即协变；<code>setValue</code>方法类型是Date，而父类的类型是Object，就不是重写，而是重载了。Java通过一种特殊的方式来实现这种情况——桥接方法。可以查看B类的字节码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; class version 52.0 (52)</span><br><span class="line">&#x2F;&#x2F; access flags 0x21</span><br><span class="line">&#x2F;&#x2F; signature LA&lt;Ljava&#x2F;util&#x2F;Date;&gt;;</span><br><span class="line">&#x2F;&#x2F; declaration: B extends A&lt;java.util.Date&gt;</span><br><span class="line">public class B extends A &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; compiled from: B.java</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public &lt;init&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL A.&lt;init&gt; ()V</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this LB; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public getValue()Ljava&#x2F;util&#x2F;Date;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 6 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESPECIAL A.getValue ()Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">    CHECKCAST java&#x2F;util&#x2F;Date</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this LB; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1</span><br><span class="line">  public setValue(Ljava&#x2F;util&#x2F;Date;)V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 11 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    ALOAD 1</span><br><span class="line">    INVOKESPECIAL A.setValue (Ljava&#x2F;lang&#x2F;Object;)V</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 12 L1</span><br><span class="line">    RETURN</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE this LB; L0 L2 0</span><br><span class="line">    LOCALVARIABLE value Ljava&#x2F;util&#x2F;Date; L0 L2 1</span><br><span class="line">    MAXSTACK &#x3D; 2</span><br><span class="line">    MAXLOCALS &#x3D; 2</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1041</span><br><span class="line">  public synthetic bridge setValue(Ljava&#x2F;lang&#x2F;Object;)V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    ALOAD 1</span><br><span class="line">    CHECKCAST java&#x2F;util&#x2F;Date</span><br><span class="line">    INVOKEVIRTUAL B.setValue (Ljava&#x2F;util&#x2F;Date;)V</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this LB; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 2</span><br><span class="line">    MAXLOCALS &#x3D; 2</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; access flags 0x1041</span><br><span class="line">  public synthetic bridge getValue()Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 3 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKEVIRTUAL B.getValue ()Ljava&#x2F;util&#x2F;Date;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this LB; L0 L1 0</span><br><span class="line">    MAXSTACK &#x3D; 1</span><br><span class="line">    MAXLOCALS &#x3D; 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可能会有一点疑问，子类中同时存在<code>Object getValue()</code>和<code>Date getValue()</code>，如果是我们自己写的Java代码，肯定是无法编译通过的，但是JVM字节码允许同时存在方法名相同、参数相同、返回值不同的多个方法。需要注意的是，<code>Class.getDeclaredMethods()</code>会返回类中所有的方法，包括桥接方法；而<code>Class.getDeclaredMethod(String, Class...)</code>只会返回一个实际的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Method method : B<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredMethods</span>()) </span>&#123;</span><br><span class="line">    System.out.println(method.toGenericString());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"========"</span>);</span><br><span class="line">System.out.println(B.class.getDeclaredMethod("getValue").toGenericString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> B.main(java.lang.String[]) <span class="keyword">throws</span> java.lang.NoSuchMethodException</span><br><span class="line"><span class="keyword">public</span> java.lang.Object B.getValue()</span><br><span class="line"><span class="keyword">public</span> java.util.Date B.getValue()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> B.setValue(java.util.Date)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> B.setValue(java.lang.Object)</span><br><span class="line">========</span><br><span class="line"><span class="keyword">public</span> java.util.Date B.getValue()</span><br></pre></td></tr></table></figure><h3 id="3-1-5-基本类型不能作为泛型类型">3.1.5 基本类型不能作为泛型类型</h3><p>因为泛型擦除后原始类型会变成Object，因此只能是Integer而不能是int。我们可以<code>list.add(1)</code>是因为Java基本类型的自动装箱拆箱。</p><h2 id="3-2-泛型中的其他特性">3.2 泛型中的其他特性</h2><h3 id="3-2-1-泛型不能被直接实例化">3.2.1 泛型不能被直接实例化</h3><p>泛型类型不能被直接实例化，是因为真实类型只有在运行时才能确定，在编译期无法确定，也就无法找到对应的字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T test = <span class="keyword">new</span> T(); <span class="comment">// 编译报错</span></span><br><span class="line"><span class="comment">// 通过反射获取泛型实例</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-泛型类中的静态方法和静态变量">3.2.1 泛型类中的静态方法和静态变量</h3><p>泛型类中的静态方法和静态变量是不能直接使用泛型类中声明的泛型参数的。因为泛型类中的类型参数是在定义对象的时候指定的，而静态方法和静态变量是不需要创建对象就可以使用的。对象都没创建，泛型参数也就无法指定。静态方法如果需要用到泛型，就需要在定义方法的时候定义泛型参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one; <span class="comment">// 编译错误</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">show</span><span class="params">(T one)</span> </span>&#123; <span class="comment">// 编译错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">look</span><span class="params">(T one)</span> </span>&#123; <span class="comment">// 这里使用的是方法前边定义的T，而不是类上边定义的T，因此是正确的。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-泛型与异常">3.2.2 泛型与异常</h3><ul><li>不能抛出，也不能捕获泛型类对象。不允许用泛型类扩展Throwable。</li><li>不能在cache子句中使用泛型变量。</li><li>可以在声明中使用泛型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123; ...... &#125; <span class="comment">// 无法通过编译</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&#125; cache (T t) &#123; <span class="comment">// 擦除之后会变成原始类型，和之后的重复</span></span><br><span class="line">&#125; cache (RuntimeException e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(<span class="keyword">final</span> Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123; <span class="comment">// 这种是可以的</span></span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-如何获取泛型参数类型">3.2.3 如何获取泛型参数类型</h3><p>只有在类实现的时候（包括匿名内部类等）指定的泛型才可以通过Class获取，其他情况只能通过增加一个<code>Class&lt;T&gt;</code>的参数来得到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> GenericClass&lt;String&gt; genericClass = <span class="keyword">new</span> GenericClass&lt;String&gt;() &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">final</span> Type superclass = genericClass.getClass().getGenericSuperclass();</span><br><span class="line"><span class="keyword">final</span> Type type = ((ParameterizedType)superclass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">System.out.println(type.getTypeName());</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">java.lang.String</span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1"  class="footnote-item"><p><a href="https://pdai.tech/md/java/basic/java-basic-x-generic.html" target="_blank" rel="noopener">Java基础 - 泛型机制详解</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sharing </tag>
            
            <tag> Java </tag>
            
            <tag> Basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术分享：初识ZGC</title>
      <link href="/2022/04/19/2022-04-19-a-first-look-into-zgc.html"/>
      <url>/2022/04/19/2022-04-19-a-first-look-into-zgc.html</url>
      
        <content type="html"><![CDATA[<h1>一、ZGC 介绍</h1><p>ZGC（Z Garbage Collector）是一种可扩展的低延迟垃圾收集器，旨在满足以下目标：</p><ul><li>亚毫秒最大停顿时间<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（Sub-millisecond max pause times）；</li><li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加（Pause times do not increase with the heap, live-set or root-set size）；</li><li>支持8MB到16TB的堆（Handle heaps ranging from a 8MB to 16TB in size）。</li></ul><a id="more"></a><p>ZGC最初在JDK11中作为一项实验性功能引入，JDK13将支持的最大堆从4T增加到16T，JDK14将最小堆支持到8M，在JDK15中宣布可用于生产，JDK16发布之后实现了最大停顿时间不超过1ms，使用参数<code>–XX:+UseZGC</code>就可以开启ZGC。</p><p>官网关于ZGC的关键词：并发（Concurrent）、基于区域（Region-based）、压缩（Compacting）、NUMA<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>感知（NUMA-aware）、使用染色指针<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>（Using colored pointers）、使用读屏障（Using load barriers）。</p><h1>二、GC过程</h1><p>ZGC依旧采用标记-复制算法，在标记、转移、重定位阶段几乎都是并发进行的，这也是ZGC可以实现亚毫秒级停顿的关键原因。只有三个STW阶段：初始标记、再标记、初始转移。</p><blockquote><ol><li><strong>初始标记(Phase 1: Pause Mark Start)</strong><br>这个阶段需要STW，切换到marked视图，为并发标记做准备。JDK16之前会在这个阶段标记GC ROOT，之后改为并发标记GC ROOT。</li><li><strong>并发标记(Phase 2: Concurrent Mark)</strong><br>遍历整个堆中存活的对象，并将其指针染色。顺便还会修复坏指针。</li><li><strong>完成初始标记(Phase 3: Pause Mark End)</strong><br>这个阶段会STW，判断标记是否完成。</li><li><strong>并发标记释放(Phase 4: Concurrent Mark Free)</strong><br>释放所有未使用的标记堆栈空间。</li><li><strong>并发处理软引用、弱引用(Phase 5: Concurrent Process Non-Strong References)</strong></li><li><strong>并发重置转移集(Phase 6: Concurrent Reset Relocation Set)</strong><br>重置Relocation Set。</li><li><strong>验证(Phase 7: Pause Verify)</strong><br>验证GC状态。</li><li><strong>并发选择转移集(Phase 8: Concurrent Select Relocation Set)</strong><br>一次GC中可能会有很多分区可以被回收，在这个阶段会选择回收价值较高的分区，把他们放入Relocation Set。</li><li><strong>初始转移(Phase 9: Pause Relocate Start)</strong><br>切换到remapped视图，为并发转移做准备。</li><li><strong>并发转移(Phase 10: Concurrent Relocate)</strong><br>遍历Relocation Set，将存活的对象迁移。</li></ol></blockquote><h1>三、关键技术</h1><h2 id="3-1-内存多重映射">3.1 内存多重映射</h2><p>使用mmap将不同的虚拟内存地址映射到同一物理地址上。如下图：</p><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCJyqhKNWnSzQpxlbFsrgVhftXcrYKdPfYW5F648jCK6fkOa51QWeNLqfYIM9IOd6gmlFEbSydj46akRYAI_ABWDeKdkwQydpAYgVzwryiRuJ9OOefwEhQONKJqKeDYL4ATpKMgy2AKVo0nHByYc36OwfoICrB0GO-0000" /><p>当应用创建对象时，会在堆上申请一个虚拟地址，ZGC会为这个对象在Marked0、Marked1和Remapped三个视图上分别申请一个虚拟地址，这三个虚拟地址映射到同一个物理地址，这三个视图在同一时间只有一个是有效的，ZGC就是通过切换这三个视图实现并发的垃圾回收。</p><h2 id="3-2-染色指针">3.2 染色指针</h2><p>之前的垃圾收集器是将GC信息存在对象头的Mark Word中（在64位虚拟机中0～1位锁标志，2～63位GC标记及分代年龄），ZGC将GC信息放在对象指针中，0～43位为对象地址，44～47位为标志位，其余16位为0，因此ZGC最大可以管理16TB（2<sup>44</sup>）内存。通过这四个标志位，JVM 不用访问对象就可以直接从指针上分辨出对象的三色标记状态（Marked0、Marked1）、是否进入了重分配集（Remapped）、是否需要通过 finalize 方法来访问到（Finalizable）。</p><h2 id="3-3-内存布局">3.3 内存布局</h2><p>G1将整个堆内存分成了大小相同的Region，每个Region的大小可以通过<code>-XX:G1HeapRegionSize</code>来设置，大小为1～32MB（必须是2<sup>n</sup>），默认有2048个Region，因此，G1能管理的最大堆内存为64GB（2048*32MB），最小堆内存为2GB（2048*1MB）。</p><p>ZGC的堆与G1类似，也是基于Region分布的，不同的地方在于ZGC不分代、动态创建和销毁以及大小不固定，包括三种类型的Region：</p><ul><li><strong>Small Region</strong>：2MB，主要用于放置小于256KB的小对象。</li><li><strong>Medium Region</strong>：32MB，主要用于放置大于等于256KB小于4MB的对象。</li><li><strong>Large Region</strong>：N*2MB，这个类型的Region是可以动态变化的，不过必须是2MB的整数倍，最小支持4MB。每个Large Region只放置一个大对象，并且是不会被重分配的。</li></ul><h2 id="3-4-读屏障-load-barrier">3.4 读屏障(Load Barrier)</h2><p>读屏障类似Spring AOP的前置增强，JVM在应用代码中插入一小段代码，当线程从<strong>堆中读取对象的引用</strong>时，就会执行这段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object o = obj.FieldA   <span class="comment">// 从堆中读取引用，需要加入屏障</span></span><br><span class="line">&lt;Load barrier&gt;</span><br><span class="line">Object p = o  <span class="comment">// 无需加入屏障，因为不是从堆中读取引用</span></span><br><span class="line">o.dosomething() <span class="comment">// 无需加入屏障，因为不是从堆中读取引用</span></span><br><span class="line"><span class="keyword">int</span> i =  obj.FieldB  <span class="comment">//无需加入屏障，因为不是对象引用</span></span><br></pre></td></tr></table></figure><p>读屏障的作用：由于GC线程和应用线程是并行执行的，就会存在某一时刻对象A中引用对象B，此时对象B已被转移，也就是两个对象处在不同的视图中，当应用线程去读取对象B时，就会发现对象B已被转移，就可以修正对象的引用，获取到的也是最新的引用。</p><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU82ixYiNgpV_RH_sjC5RKzsh7q-g-Nf-fqlDYwq1ehld_sqTIb8TcF_orbphBcuCjCKD9xEsV1qRiEBvMrFP-zxlhRpoQw-ftidF-tiXOYytpDVKw4a8pLFGUFPZFMQN0eALi-cBtWvf-7fafRd4zgikL9pYbE1XanO1f9JK02P-6pjugTpLhpOk-RvyjsO-a40vXImacUJUv_i1Re6985c6jp46Uk1Oa_tx7gwP-hpAIkm6ufayBC5xI_MRK0s68VXS1qlstkVhflrP6ylXgQybCmqBWGBGWA3Eh-0Yyi1o0E6F000" /><h2 id="3-5-堆栈水印屏障-stack-watermark-barrier">3.5 堆栈水印屏障(Stack Watermark Barrier)</h2><p>众所周知，STW发生在安全点（safe-point），之前的垃圾收集器会在STW期间标记GC Root，这个过程需要扫描线程堆栈，如果应用拥有大量线程，那么STW的时间就会增加，如果这些线程的调用栈很深的话，这个时间会更长。从JDK16开始，扫描线程堆栈变成了并发进行。</p><p>在应用线程运行的同时，去扫描线程堆栈，就需要用到一个叫做堆栈水印屏障的技术。这是一种可以防止线程在没有检查是否安全的情况下返回栈帧的机制。具体细节可以查看 <a href="http://openjdk.java.net/jeps/376" target="_blank" rel="noopener">JEP 376: ZGC: Concurrent Thread-Stack Processing</a>。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1"  class="footnote-item"><p>JDK16发布以后停顿时间已经缩小到1毫秒以内，并且时间复杂度为O(1)。 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2"  class="footnote-item"><p>非一致性内存访问，一种硬件层面的特性。统一内存访问，即任何CPU操作访问内存时间都一样。 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3"  class="footnote-item"><p>染色指针是一种将信息存储在指针中的技术。 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sharing </tag>
            
            <tag> Java </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术分享：使用Jib构建容器镜像</title>
      <link href="/2021/12/06/2021-12-06-build-container-image-with-jib.html"/>
      <url>/2021/12/06/2021-12-06-build-container-image-with-jib.html</url>
      
        <content type="html"><![CDATA[<h1>一、背景</h1><p>随着服务越来越多，以及项目越来越复杂，在上线发布高峰时段镜像上传、容器创建时间很长。Jar包越来越大，编译打包、上传下载镜像会占用大量带宽，造成拥堵。因此改善这种情况，一方面可以通过合理的依赖配置减小jar包体积，另一方面还可以从镜像入手。</p><a id="more"></a><h1>二、容器、镜像、Docker</h1><p>容器是一种虚拟化技术，最早可以追溯到1979年，Unix版本7引入的Chroot Jail及Chroot系统调用，它可以实现进程及其子进程与系统隔离。2007年谷歌发布了CGroups，支持限制和隔离进程的资源使用（CPU，内存，磁盘I / O，网络等）。2013年Docker发布了第一个版本，容器化进入迸发期，Docker核心的创新是容器镜像，一种新型的应用打包、分发和运行机制。</p><p>容器镜像将应用运行环境，包括代码、依赖库、工具、资源文件和元信息等，打包成一种操作系统发行版无关的不可变更软件包。</p><h1>三、构建镜像</h1><h2 id="3-1-通过容器打包">3.1、通过容器打包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先用基础镜像启动一个容器</span></span><br><span class="line">docker run -it --name=base -p 8080:8080 openjdk:8</span><br><span class="line"><span class="comment"># 用命令把jar包复制到容器里</span></span><br><span class="line">docker cp ./server-0.0.0-SNAPSHOT.jar base:/</span><br><span class="line"><span class="comment"># 将容器变动提交，这里在提交的时候指定了镜像的CMD部分</span></span><br><span class="line">docker commit --change=<span class="string">'CMD ["java", "-jar", "./server-0.0.0-SNAPSHOT.jar", "--spring.profiles.active=qa"]'</span> base server:commit</span><br></pre></td></tr></table></figure><h2 id="3-2-dockerfile">3.2、Dockerfile</h2><p>创建一个<code>Dockerfile</code>文件，添加如下内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> spring.profiles.active=qa</span><br><span class="line"><span class="comment"># 添加jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./server-0.0.0-SNAPSHOT.jar /</span></span><br><span class="line"><span class="comment"># 开放端口号</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/server-0.0.0-SNAPSHOT.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>把<code>Dockerfile</code>和<code>server-0.0.0-SNAPSHOT.jar</code>放在同一个目录，然后在这个目录下执行<code>docker build -t server:dockerfile .</code>，就可以成功构建一个镜像了。</p><h2 id="3-3-jib">3.3、Jib</h2><p>Jib<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>是一个开源的快速而简单的容器镜像构建工具，可以脱离Docker环境，也不需要编写Dockerfile，只需要添加一个Maven插件（同时提供了Gradle插件）就将Java程序打包成一个容器镜像，并支持Docker和OCI格式。</p><p>Jib充分利用镜像分层的原理，将程序、资源、依赖打包到不同的层，每次只重新构建、推送发生变化的层，加快构建、部署速度。</p><p>如何使用Jib构建镜像呢？首先，在项目中增加Jib的Maven插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-layer-filter-extension-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span>openjdk:8<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">to</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span>&gt;</span>server:jib<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">spring.profiles.active</span>&gt;</span>qa<span class="tag">&lt;/<span class="name">spring.profiles.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ports</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ports</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，执行<code>mvn compile jib:build</code>打包，就可以构建容器并推送到远程仓库了。</p><p>也可以将构建过程绑定到其他命令，在Maven插件配置中增加如下配置，将打包镜像绑定到<code>package</code>命令中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际使用过程中，我们的项目是多模块，并且有模块间的依赖的，而Jib默认会把jar包放在同一层，还会有一些引用的jar包会频繁的变动，如果这些包和其他不常变的依赖放在同一层的话，每次变动还是要上传大量文件。</p><p>Jib的Maven插件从2.3.0版本（Gradle插件为2.4.0）开始提供了一个可扩展的能力<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，并且提供了一个镜像层过滤的插件（<code>Jib Layer-Filter Extension</code><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>），通过这个插件就按一定规则可以将一部分包单独打在一个镜像层，从而将频繁变动的包和不常变的基础包分离。</p><p>在Jib插件的<code>configuration</code>节点下增加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginExtensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginExtension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">implementation</span>&gt;</span></span><br><span class="line">            com.google.cloud.tools.jib.maven.extension.layerfilter.JibLayerFilterExtension</span><br><span class="line">        <span class="tag">&lt;/<span class="name">implementation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span></span></span><br><span class="line"><span class="tag">                <span class="attr">implementation</span>=<span class="string">"com.google.cloud.tools.jib.maven.extension.layerfilter.Configuration"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">glob</span>&gt;</span>**/xxx-*.jar<span class="tag">&lt;/<span class="name">glob</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">toLayer</span>&gt;</span>xxx libraries<span class="tag">&lt;/<span class="name">toLayer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">glob</span>&gt;</span>**/xxx-aaa-*.jar<span class="tag">&lt;/<span class="name">glob</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">toLayer</span>&gt;</span>aaa dependencies<span class="tag">&lt;/<span class="name">toLayer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginExtension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginExtensions</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>四、Jib实现分层的基本原理</h1><p>使用Jib默认打包后的应用结构在容器中的结构为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|____classes</span><br><span class="line">| |____com</span><br><span class="line">| | |____peppa</span><br><span class="line">| | |____...</span><br><span class="line">|____resources</span><br><span class="line">| |____application.properties</span><br><span class="line">| |____application-online.properties</span><br><span class="line">| |____...</span><br><span class="line">|____libs</span><br><span class="line">| |____accessors-smart-1.2.jar</span><br><span class="line">| |____activation-1.1.jar</span><br><span class="line">| |____android-json-0.0.20131108.vaadin1.jar</span><br><span class="line">| |____...</span><br></pre></td></tr></table></figure><p>可以使用<code>maven-dependency-plugin</code>和<code>maven-resources-plugin</code>来实现这种结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overWriteReleases</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overWriteReleases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overWriteSnapshots</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overWriteSnapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overWriteIfNewer</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overWriteIfNewer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/resources<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包之后在target目录使用命令<code>java -cp /app/resources:/app/classes:/app/libs/* win.wellcoding.jib.Application</code>就可以启动了。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1"  class="footnote-item"><p><a href="https://github.com/GoogleContainerTools/jib" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/jib</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2"  class="footnote-item"><p><a href="https://github.com/GoogleContainerTools/jib-extensions" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/jib-extensions</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3"  class="footnote-item"><p><a href="https://github.com/GoogleContainerTools/jib-extensions/tree/master/first-party/jib-layer-filter-extension-maven" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/jib-extensions/tree/master/first-party/jib-layer-filter-extension-maven</a> <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Ops </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sharing </tag>
            
            <tag> Docker </tag>
            
            <tag> Jib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术分享：设计模式（一）</title>
      <link href="/2020/08/06/2020-08-06-design-patterns-1.html"/>
      <url>/2020/08/06/2020-08-06-design-patterns-1.html</url>
      
        <content type="html"><![CDATA[<h1>设计模式是什么？</h1><p>“它是一套理论，由软件界的先辈们（The Gang of Four：包括Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides）总结出的一套可以反复使用的经验，它可以提高代码的可重用性，增强系统的可维护性，以及解决一系列的复杂问题。”——摘自《设计模式之禅》</p><a id="more"></a><blockquote><p>设计模式不是工具，不能为了设计模式而使用设计模式，它理解为是一种可以指导你如何去设计一个优秀的架构、编写一段健壮的代码、解决一个复杂的需求的哲学。</p></blockquote><h1>6大设计原则</h1><p>6大设计原则包括：单一指责原则、里氏替换原则、依赖倒置原则、接口隔离原则、迪米特法则、开闭原则。</p><h1>23种设计模式</h1><p>23种设计模式包括：单例模式、工厂方法模式、抽象工厂模式、模版方法模式、构造者模式、代理模式、原型模式、中介者模式、命令模式、责任链模式、装饰模式、策略模式、适配器模式、迭代器模式、组合模式、观察者模式、门面模式、备忘录模式、访问者模式、状态模式、解释器模式、享元模式、桥梁模式。</p><h1>常见设计模式</h1><h2 id="单例模式">单例模式</h2><h3 id="定义">定义</h3><p>Ensure a class has only one instance, and provide a global point of access to it.（确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。）</p><h3 id="实现方式">实现方式</h3><p><img data-src="/images/design-patterns/Singleton1.png" alt="饿汉模式"><br><img data-src="/images/design-patterns/Singleton2.png" alt="懒汉模式（线程不安全）"><br><img data-src="/images/design-patterns/Singleton3.png" alt="懒汉模式（线程安全）"><br><img data-src="/images/design-patterns/Singleton4.png" alt="双重检查模式 （DCL）"><br><img data-src="/images/design-patterns/Singleton5.png" alt="静态内部类单例模式"><br><img data-src="/images/design-patterns/Singleton6.png" alt="枚举单例模式"></p><h2 id="工厂方法模式">工厂方法模式</h2><h3 id="定义-v2">定义</h3><p>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.（定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。）</p><h3 id="通用类图">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbK8ACfFAKqkKQYkvKhEIImkLd3EpqikIYr9XKeOAgHMbAJcfHGZgqHeTovAJIp9BrAevb800cq5jyHa8BVIDxKa8pz5GvCBtLIeUeIfS0DgkRWmhBRHqyFGoUK0r0Vq0m00" /><blockquote><p>举个例子：<code>org.slf4j.LoggerFactory#getLogger(java.lang.Class)</code>就是一个工厂方法，只不过里边还用了其他模式。</p></blockquote><h2 id="抽象工厂模式">抽象工厂模式</h2><h3 id="定义-v3">定义</h3><p>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.（为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。）</p><h3 id="通用类图-v2">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/RP2n2iCm34HtVON6bf90zWmfWSxz1TLH8U3Q82dG4lBlDS64ObUWwKxtE0rg9BQyF3XFgZZwcOFXki4SZEL9Zl7wK1DoTfSuBMuNipa69soSXGxvRHmc_NTHnztIHldW2fZcWgCm7LcdCvIKxAyfHz06K9BxficTeBJ_I5MHlcqhBWo9cZxr1G00" /><blockquote><p>举个例子：还是<code>org.slf4j.LoggerFactory#getLogger(java.lang.String)</code>，它的实现就是一个抽象工厂模式。</p></blockquote><h2 id="模版方法模式">模版方法模式</h2><h3 id="定义-v4">定义</h3><p>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’sstructure.（定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。）</p><h3 id="通用类图-v3">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCAYufIamkKKZEIImkLd24Sft1l6ek1I1GLYZBpqnHICbtpAiioSZCIzVGH1KFpizDHPRGXaYKfEOMv2IMfFe29VDJW7ArN11BdFFpaejIIrB1bXWgf5QKfEQbODYDLRKHRjLS3a1ne9S0" /><h3 id="使用场景">使用场景</h3><ul><li>多个子类有公有的方法，并且逻辑基本相同时。</li><li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。</li><li>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。</li></ul><blockquote><p>举个例子：<code>org.springframework.web.servlet.view.AbstractTemplateView</code>中将最终渲染视图交给了子类。</p></blockquote><h2 id="构造者模式">构造者模式</h2><h3 id="定义-v5">定义</h3><p>Separate the construction of a complex object from its representation so that the same construction process can create different representations.（将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。）</p><h3 id="通用类图-v4">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/POz12W8n34NtEKMMYdJXNcHG3p1Ng6s4GcqXIK6GkRiPP-eip2xX_PTa4FMixPaXP2-2jyGKj3A-0QqEUAr5b5lGtHucI4M97puGNbhAaJRkFlUZkRxS8hDiO59QsIFIIwb4sSAT7Bb6sp4Fu7T2TUxSKUZ4oRa_BmncjHy-" /><h3 id="使用场景-v2">使用场景</h3><ul><li>相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式。</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时，则可以使用该模式。</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适。</li><li>在对象创建过程中会使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时，也可以采用建造者模式封装该对象的创建过程。该种场景只能是一个补偿方法，因为一个对象不容易获得，而在设计阶段竟然没有发觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标。</li></ul><blockquote><p>注意：<br>虽然与工厂模式都是创建实例，但构造者模式更侧重于属性和执行顺序。</p></blockquote><h2 id="代理模式">代理模式</h2><h3 id="定义-v6">定义</h3><p>Provide a surrogate or placeholder for another object to control access to it.（为其他对象提供一种代理以控制对这个对象的访问。）</p><h3 id="通用类图-v5">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbK8BatAIaqkKQYkvKhEIImkLWXAJSo12QPMbAJcfHHZAWeeog-en9JcKW02RMGZk6gva0sqqTM5wELo0Ee4kWG0" /><h2 id="装饰模式">装饰模式</h2><h3 id="定义-v7">定义</h3><p>Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.（动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。）</p><h3 id="通用类图-v6">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/RO-n2i9038RtF4N6IkdGtQ6WUv_XE7-Xq2Ob5q4GtzqCUYTenijttqUcuidyjgsqYCEkAODFkkqg4ES7SKpFymvBlgXq1tfINbCfGKasE2ezCkuEkPHlmOS-8sierFv1xqfz-MdKtwtHXD5ehkCmQDlH56mSzm80" /><h3 id="使用场景-v3">使用场景</h3><ul><li>需要扩展一个类的功能，或给一个类增加附加功能。</li><li>需要动态地给一个对象增加功能，这些功能可以再动态地撤销。</li><li>需要为一批的兄弟类进行改装或加装功能，当然是首选装饰模式。</li></ul><blockquote><p>举个例子：<code>java.io.Reader</code></p></blockquote><h2 id="策略模式">策略模式</h2><h3 id="定义-v8">定义</h3><p>Define a family of algorithms, encapsulate each one, and make them interchangeable.（定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。）</p><h3 id="通用类图-v7">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3Epoj9hIXHgEPI009jXU2IeiIIrFHAhbgkJA1CKLfYSYfSKA6w5g4jkIYr91KcOwW0D2GrBwKOHIsSRQEhcm-pYii1g0xe0000" /><h3 id="使用场景-v4">使用场景</h3><ul><li>多个类只有在算法或行为上稍有不同的场景。</li><li>算法需要自由切换的场景。</li><li>需要屏蔽算法规则的场景。</li></ul><h2 id="适配器模式">适配器模式</h2><h3 id="定义-v9">定义</h3><p>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t other wise because of incompatible interfaces.（将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。）</p><h3 id="通用类图-v8">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAr6ehkNAp2j9BKfBJ4vL24aiIay5Yq7KEAOa5fIafg8B52caLfIavgKKGpNe82k4cc6ZgmkrWii1g1HeBm00" /><h3 id="使用场景-v5">使用场景</h3><ul><li>你有动机修改一个已经投产中的接口时，适配器模式可能是最适合你的模式。</li></ul><blockquote><p>举个例子：搜索<code>*Adapter</code>，基本都是。</p></blockquote><h2 id="迭代器模式">迭代器模式</h2><h3 id="定义-v10">定义</h3><p>Provide a way to access the elements of anaggregate object sequentially without exposing its underlying representation.（它提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。）</p><h3 id="通用类图-v9">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbLmJ4ylIarFB4bLgAxbIiv9B2vMSCxFIovABKc5Inagf5QKfEQb5AEgHXZY2MGabkGNOPe1aq4OWQmMYqqskhgOchamZRFHqyFYK2u7e1r03m80" /><blockquote><p>举个例子：<code>java.lang.Iterable#iterator</code></p></blockquote><h2 id="观察者模式">观察者模式</h2><h3 id="定义-v11">定义</h3><p>Define a one to many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.（定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。）</p><h3 id="通用类图-v10">通用类图</h3><img data-src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLWWkJSfAJIvHgEPI009j1SUIaiJa38ryA_-aujIYijGYJQY4IoeE2R_yaioqIWrDhbgeaSxvUSb5gIMfKACD5L8hIbBpKf3igkNAp2j9BKfBJ4vLW1a74aNL3vD1682i5iwsqTM5cSpb05G6z1i0" /><h3 id="使用场景-v6">使用场景</h3><ul><li>关联行为场景。需要注意的是，关联行为是可拆分的，而不是“组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息队列的处理机制。</li></ul><blockquote><p>举个例子：<code>org.springframework.context.event.ApplicationContextEvent</code>可以监听Spring容器事件。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 截取网页截图</title>
      <link href="/2020/08/06/2020-08-06-chrome-capture-screenshot.html"/>
      <url>/2020/08/06/2020-08-06-chrome-capture-screenshot.html</url>
      
        <content type="html"><![CDATA[<p>很多同学一定都经历过为了找一个好用的网页截图软件而各种搜索的情况，那一定不知道强大的Chrome自身就可以直接截取网页图片。下面就是详细步骤：</p><a id="more"></a><ol><li>用Chrome浏览器打开想要截图的网页；</li><li>按F12（Windows）或⌥⌘I（macOS）打开开发者工具；</li><li>按Ctrl+Shift+M（Windows）或⌘⇧M打开Toggle device toolbar；<br><img data-src="/images/chrome-capture-screenshot-001.png" alt="Toggle device toolbar按钮"></li><li>在上方出现的工具栏里输入需要的分辨率，如1440*1024，不用管缩放，不要拖动下面的页面；<br><img data-src="/images/chrome-capture-screenshot-002.png" alt="输入需要的分辨率"></li><li>按Ctrl+P（Windows）或⌘P（macOS），输入<code>&gt; screenshot</code>，选择对应的选项就可以截图了。<br><img data-src="/images/chrome-capture-screenshot-003.png" alt="输入命令"></li></ol><blockquote><ul><li>Capture area screenshot —— 截取指定区域</li><li>Capture full size screenshot —— 截取整个网页</li><li>Capture node screenshot —— 截取指定HTML元素</li><li>Capture screenshot —— 截取当前展示的</li></ul></blockquote><blockquote><p>Tips：如果要截图的网站滚动条在页面内部，可以将第4步的分辨率高度调高，让整个网页都展示出来再截图。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Java加载字体文件异常</title>
      <link href="/2019/07/06/2019-07-06-java-load-fontfile-exception.html"/>
      <url>/2019/07/06/2019-07-06-java-load-fontfile-exception.html</url>
      
        <content type="html"><![CDATA[<p>公司项目上需要生成一张入学通知图片给用户，目前采用的是通过后端Java使用<code>Graphics2D</code>库将动态数据填充到背景图上再写回浏览器的方式。由于设计图采用了几种比较特殊的字体，字体文件考虑到部署可迁移，没有采用安装到系统或者jre的方式，而是放在项目包下，最开始跟页面文件一起放在<code>WEB-INF</code>目录下，在Controller中使用<code>request.getSession().getServletContext().getRealPath(&quot;WEB-INF/ttf/iYuanTi.ttf&quot;)</code>来获取字体文件的真实路径，通过<code>Font.createFont(fontFormat, fontStream)</code>加载字体，但是这样做会造成服务器硬盘爆满，具体原因另做分析。</p><p>由于上面方法的问题，考虑将字体文件放在<code>resource</code>文件夹下(打包以后在<code>classes</code>下)，在应用初始化的时候进行加载，只需加载一次，本地调试没问题，打包，上测试机，访问，没出来，看日志，加载字体的时候抛出了<code>java.awt.FontFormatException: bad table, tag=1196445523</code>异常，查文件、部署包都没问题，发现字体文件的大小不太对，对比文件Hash，确实部署包和源文件不是同一个文件了。</p><a id="more"></a><p>最后，查出问题是因为项目使用了<code>maven-resources-plugin</code>插件，这个插件会将指定的文件夹下的文件，按照配置的字符编码进行转换。所以只需要配置排除掉ttf文件就可以了。配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.ttf<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.ttf<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot基于iReport使用自定义数据导出复杂PDF</title>
      <link href="/2018/10/10/2018-10-10-export-pdf-by-ireport-with-jrdatasource.html"/>
      <url>/2018/10/10/2018-10-10-export-pdf-by-ireport-with-jrdatasource.html</url>
      
        <content type="html"><![CDATA[<p>之前我所接触到的iReport制作报表的方式是，将查询数据的SQL卸载报表jrxml文件里，在Java项目里将数据库连接，以及报表需要的一些参数一起传给报表，再由<code>jasperreports</code>将报表导出为所需要的格式。这种方式一般用来导出一些格式相对单一的报表，如表格、单个或多个图形等。</p><a id="more"></a><p>这次遇到了一种比较复杂等情况，一个报表包含两部分：一部分为类似个人信息的固定信息；另一部分是一个表格，包含多条记录，需要分页。如果直接写SQL需要多个数据源，而且涉及到一些条件判断，比较复杂。因此这里采用了在Java代码中将数据组织起来，iReport仅将数据展示出来，不再包含SQL。</p><p>首先，处理iReport报表需要添加<code>jasperreports</code>依赖，导出pdf需要依赖<code>itext</code>库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.jasperreports<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasperreports<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lowagie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asiancmaps<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着将数据查出来，组成需要的结构，然后编译报表（这里每次导出报表都进行编译是为了在更新了报表以后不用重启应用就可以生效），填充数据，使用<code>JasperExportManager</code>工具将报表输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> win.wellcoding.report.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRDataSource;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRException;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperCompileManager;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperExportManager;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperFillManager;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperPrint;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperReport;</span><br><span class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 旺旺小学酥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> 2018/10/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/report"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(<span class="keyword">final</span> HttpServletResponse response)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; result = Maps.newHashMap();</span><br><span class="line">        <span class="comment">// 固定的个人信息</span></span><br><span class="line">        result.put(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        result.put(<span class="string">"college"</span>, <span class="string">"计算机学员"</span>);</span><br><span class="line">        result.put(<span class="string">"serial"</span>, <span class="string">"00000001"</span>);</span><br><span class="line">        <span class="comment">// 多条成绩信息</span></span><br><span class="line">        <span class="comment">// Lists是Google的guava库中的</span></span><br><span class="line">        <span class="comment">// 这里用到了JRDataSource中的JRBeanCollectionDataSource，表示集合数据源</span></span><br><span class="line">        <span class="keyword">final</span> JRDataSource datasource = <span class="keyword">new</span> JRBeanCollectionDataSource(</span><br><span class="line">            Lists.newArrayList(<span class="keyword">new</span> Score(<span class="string">"语文"</span>, <span class="number">85</span>), <span class="keyword">new</span> Score(<span class="string">"英语"</span>, <span class="number">80</span>), <span class="keyword">new</span> Score(<span class="string">"数学"</span>, <span class="number">90</span>)));</span><br><span class="line">        <span class="comment">//编译jrxml</span></span><br><span class="line">        <span class="keyword">final</span> JasperReport jasperReport = JasperCompileManager.compileReport(<span class="string">"/Users/xiaoxuesu/record.jrxml"</span>);</span><br><span class="line">        <span class="comment">//渲染加载数据</span></span><br><span class="line">        <span class="keyword">final</span> JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, result, datasource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加Header信息，告诉浏览器这是一个附件，以及附件名称</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; 导出文件名称.pdf"</span>);</span><br><span class="line">        <span class="keyword">final</span> OutputStream outputStream = response.getOutputStream();</span><br><span class="line">        <span class="comment">//输出PDF</span></span><br><span class="line">        JasperExportManager.exportReportToPdfStream(jasperPrint, outputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String subject;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer score;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Score</span><span class="params">(<span class="keyword">final</span> String subject, <span class="keyword">final</span> Integer score)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.subject = subject;</span><br><span class="line">            <span class="keyword">this</span>.score = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报表需要添加4个Parameters：<code>name</code>、<code>college</code>、<code>serial</code>、<code>records</code>，其中<code>records</code>参数要注意Parameter Class属性要选<code>JREmptyDataSource</code>，与<code>Score</code>类对应的添加两个Fields。固定的个人信息放在Page Header，不会进行迭代填充，下面多条记录的成绩信息的表头放在Column Header，然后表格内容放在Detail中，会根据数据迭代显示，这里需要注意的是Detail的高度为一条记录的高度，页脚的页码放在Page Footer中，这样一页报表的内容就设计好了，当一页放不下的时候就会自动分页。</p><p><img data-src="/images/ireport_001.png" alt="iReport报表设计效果"></p><p>报表XML如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jasperReport</span> <span class="attr">xmlns</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd"</span> <span class="attr">name</span>=<span class="string">"record"</span> <span class="attr">language</span>=<span class="string">"groovy"</span> <span class="attr">pageWidth</span>=<span class="string">"595"</span> <span class="attr">pageHeight</span>=<span class="string">"842"</span> <span class="attr">columnWidth</span>=<span class="string">"595"</span> <span class="attr">leftMargin</span>=<span class="string">"0"</span> <span class="attr">rightMargin</span>=<span class="string">"0"</span> <span class="attr">topMargin</span>=<span class="string">"0"</span> <span class="attr">bottomMargin</span>=<span class="string">"0"</span> <span class="attr">uuid</span>=<span class="string">"d7e8e1f8-0e73-4388-a5a2-2fd47f9c3a40"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ireport.zoom"</span> <span class="attr">value</span>=<span class="string">"0.75"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ireport.x"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ireport.y"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pen</span> <span class="attr">lineWidth</span>=<span class="string">"1.0"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"table_TH"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">backcolor</span>=<span class="string">"#FFFFFF"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">topPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"table_CH"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">backcolor</span>=<span class="string">"#FFBFBF"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">topPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"table_TD"</span> <span class="attr">mode</span>=<span class="string">"Opaque"</span> <span class="attr">backcolor</span>=<span class="string">"#FFFFFF"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">topPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bottomPen</span> <span class="attr">lineWidth</span>=<span class="string">"0.5"</span> <span class="attr">lineColor</span>=<span class="string">"#FFFFFF"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"college"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"serial"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"records"</span> <span class="attr">class</span>=<span class="string">"net.sf.jasperreports.engine.JREmptyDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameterDescription</span>&gt;</span>&lt;![CDATA[]]&gt;<span class="tag">&lt;/<span class="name">parameterDescription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"score"</span> <span class="attr">class</span>=<span class="string">"java.lang.Integer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pageHeader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"350"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"240"</span> <span class="attr">width</span>=<span class="string">"58"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"432e96b4-1ad4-4374-8816-3f6ac52c5797"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&lt;![CDATA[姓名：]]&gt;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"270"</span> <span class="attr">width</span>=<span class="string">"58"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"c7c2fd8f-2c43-46d1-ade0-54562d7d2f60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&lt;![CDATA[院系：]]&gt;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"300"</span> <span class="attr">width</span>=<span class="string">"58"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"cf77ef1d-26ad-48a1-884f-3ae86a55c899"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&lt;![CDATA[学号：]]&gt;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"258"</span> <span class="attr">y</span>=<span class="string">"240"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"7d5abdcb-394a-46f0-a853-b5e4226ead9e"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$P&#123;name&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"258"</span> <span class="attr">y</span>=<span class="string">"270"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"59bde699-9962-40bb-a0b7-e752ab672828"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$P&#123;college&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"258"</span> <span class="attr">y</span>=<span class="string">"300"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">uuid</span>=<span class="string">"a1ca2e23-3c26-490c-b5f1-3ad3957ac9fa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$P&#123;serial&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pageHeader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columnHeader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"35"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"157"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"74"</span> <span class="attr">height</span>=<span class="string">"35"</span> <span class="attr">uuid</span>=<span class="string">"c7a2efba-be58-459e-94da-933c56c140ff"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Center"</span> <span class="attr">verticalAlignment</span>=<span class="string">"Middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&lt;![CDATA[课程名称]]&gt;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"475"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"38"</span> <span class="attr">height</span>=<span class="string">"35"</span> <span class="attr">uuid</span>=<span class="string">"8ec5b983-8d76-4e2a-9d65-03f6108ed7ad"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Center"</span> <span class="attr">verticalAlignment</span>=<span class="string">"Middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&lt;![CDATA[成绩]]&gt;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticText</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">columnHeader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">printWhenExpression</span>&gt;</span>&lt;![CDATA[$F&#123;name&#125;.length()&gt;15]]&gt;<span class="tag">&lt;/<span class="name">printWhenExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"72"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"275"</span> <span class="attr">height</span>=<span class="string">"40"</span> <span class="attr">isPrintWhenDetailOverflows</span>=<span class="string">"true"</span> <span class="attr">uuid</span>=<span class="string">"ec6b1757-d4e7-447b-b6ee-511a7453c722"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Center"</span> <span class="attr">verticalAlignment</span>=<span class="string">"Middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$F&#123;subject&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isStretchWithOverflow</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"450"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"90"</span> <span class="attr">height</span>=<span class="string">"40"</span> <span class="attr">uuid</span>=<span class="string">"b61827c5-a4df-4304-88d6-73bf1deceb2e"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Center"</span> <span class="attr">verticalAlignment</span>=<span class="string">"Middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"18"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA[$F&#123;score&#125;]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pageFooter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">band</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textField</span> <span class="attr">isBlankWhenNull</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reportElement</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"207"</span> <span class="attr">width</span>=<span class="string">"595"</span> <span class="attr">height</span>=<span class="string">"11"</span> <span class="attr">uuid</span>=<span class="string">"8d4dfe96-7bbf-48dd-99ae-b162a43a552f"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textElement</span> <span class="attr">textAlignment</span>=<span class="string">"Center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">fontName</span>=<span class="string">"STXinwei"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">pdfFontName</span>=<span class="string">"STXinwei"</span> <span class="attr">pdfEncoding</span>=<span class="string">"Identity-H"</span> <span class="attr">isPdfEmbedded</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textElement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textFieldExpression</span>&gt;</span>&lt;![CDATA["第 "+$V&#123;PAGE_NUMBER&#125;+" 页，共 "+$V&#123;PAGE_COUNT&#125;+" 页"]]&gt;<span class="tag">&lt;/<span class="name">textFieldExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textField</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">band</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pageFooter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jasperReport</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iReport </tag>
            
            <tag> JRDataSource </tag>
            
            <tag> Export </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logstash 配置文件中文说明</title>
      <link href="/2017/09/11/2017-09-11-logstash-settings-file.html"/>
      <url>/2017/09/11/2017-09-11-logstash-settings-file.html</url>
      
        <content type="html"><![CDATA[<p>公司项目采用Docker技术进行了分布式部署，每个服务有多个实例进行负载均衡，出现问题查日志变得异常痛苦，这时发现了比较常用的一种解决方案——ELK(ElasticSearch + Logstash + Kibana)。</p><p>这里是Logstash配置文件中的配置项说明，翻译自<a href="https://www.elastic.co/guide/en/logstash/current/logstash-settings-file.html" target="_blank" rel="noopener">官方文档——logstash-settings-file章节</a>，如有不当之处，希望大家可以帮忙指出。</p><a id="more"></a><table><thead><tr><th>setting</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><a href="http://node.name" target="_blank" rel="noopener">node.name</a></td><td>节点名称。</td><td>机器的hostname</td></tr><tr><td>path.data</td><td>logstash和他的插件数据持久化目录。</td><td><code>LOGSTASH_HOME/data</code></td></tr><tr><td>pipeline.workers</td><td>workers的数量，即同时并行处理过滤和输出的管道数量。如果是备份或者CPU空闲较大，可以考虑增加这个值来更有效的利用资源。</td><td>CPU核心数量</td></tr><tr><td>pipeline.output.workers</td><td>每个输出插件实例使用的workers数量。</td><td><code>1</code></td></tr><tr><td>pipeline.batch.size</td><td>在过滤和输出之前，每个线程从输入收集的最大数量。通常较大的批处理数量会有更高的性能，但也增加了内存消耗。你可能需要增加JVM堆内存，使用变量<code>LS_HEAP_SIZE</code>来更有效但使用这个选项。</td><td><code>125</code></td></tr><tr><td>pipeline.batch.delay</td><td>批处理调度延时，单位毫秒。</td><td><code>5</code></td></tr><tr><td>pipeline.unsafe_shutdown</td><td>不安全关闭。当这个选项设置为<code>true</code>时，关闭Logstash时即会退出，不论内存中是否有未完成的事件。而默认情况下，Logstash会将所有接收到的事件全部推送到输出后才会退出。启用后将可能导致数据丢失。</td><td><code>false</code></td></tr><tr><td>path.config</td><td>管道配置文件路径。如果指定的是一个目录或者是通配符，将从目录读取所有配置并按字母顺序排序。</td><td>不同平台路径不同。具体参见<a href="https://www.elastic.co/guide/en/logstash/current/dir-layout.html" target="_blank" rel="noopener">Logstash目录结构</a>。</td></tr><tr><td>config.string</td><td>管道配置字符串，格式和配置文件一样。</td><td>None</td></tr><tr><td>config.test_and_exit</td><td>检查配置，检查完成后退出。欣赏模式不会根据此设置检查有效性。</td><td><code>false</code></td></tr><tr><td>config.reload.automatic</td><td>自动重新加载配置。也可以通过SIGHUP信号激活。</td><td><code>false</code></td></tr><tr><td>config.reload.interval</td><td>检查配置文件变化频率，单位秒。</td><td><code>3</code></td></tr><tr><td>config.debug</td><td>设置为<code>true</code>时，将以debug形式打印所有加载配置信息(必须同时设置<code>log.level: debug</code>)。<br/>注意：配置中的密码有可能以明文的形式出现在日志文件中。</td><td><code>false</code></td></tr><tr><td>queue.type</td><td>内部缓冲队列模型，<code>memory</code>为基于内存的队列模型，<code>persisted</code>为基于磁盘的队列模型，<a href="https://www.elastic.co/guide/en/logstash/current/persistent-queues.html" target="_blank" rel="noopener">persisted相关参见</a>。</td><td><code>memory</code></td></tr><tr><td>path.queue</td><td>队列数据文件存放目录。当设置<code>queue.type: persisted</code>时，才需指定。</td><td><code>path.data/queue</code></td></tr><tr><td>queue.page_capacity</td><td>页面数据容量。当设置<code>queue.type: persisted</code>时，才需指定。</td><td><code>250mb</code></td></tr><tr><td>queue.max_events</td><td>最大未读事件。当设置<code>queue.type: persisted</code>时，才需指定。</td><td><code>0</code> (不限制)</td></tr><tr><td>queue.max_bytes</td><td>队列总容量，确保小于磁盘可用容量。当设置<code>queue.type: persisted</code>时，才需指定。如果<code>queue.max_events</code>和<code>queue.max_bytes</code>同时设置，Logstash将以先达到的为准。</td><td><code>1024mb (1g)</code></td></tr><tr><td>queue.checkpoint.acks</td><td>强制检查点前最大ACK数量。当设置<code>queue.type: persisted</code>时，才需指定。设置为<code>0</code>为不限制。</td><td><code>1024</code></td></tr><tr><td>queue.checkpoint.writes</td><td>强制检查点前最大写事件数量。当设置<code>queue.type: persisted</code>时，才需指定。设置为<code>0</code>为不限制。</td><td><code>1024</code></td></tr><tr><td>queue.checkpoint.interval</td><td>强制检查页面文件头的间隔。当设置<code>queue.type: persisted</code>时，才需指定。设置为<code>0</code>将不进行周期性检查。</td><td><code>1000</code></td></tr><tr><td>queue.drain</td><td>设置为<code>true</code>时，Logstash将等待队列消费完后才会退出。</td><td><code>false</code></td></tr><tr><td>dead_letter_queue.enable</td><td>是否启用DLQ插件</td><td><code>false</code></td></tr><tr><td>dead_letter_queue.max_bytes</td><td>每个DLQ的最大大小。超过这个大小的条目将被忽略。</td><td><code>1024mb</code></td></tr><tr><td>path.dead_letter_queue</td><td>存储DLQ的目录路径。</td><td><code>path.data/dead_letter_queue</code></td></tr><tr><td>http.host</td><td>REST接口绑定地址。</td><td><code>127.0.0.1</code></td></tr><tr><td>http.port</td><td>REST接口绑定端口。</td><td><code>9600</code></td></tr><tr><td>log.level</td><td>日志级别。<code>fatal</code> <code>error</code> <code>warn</code> <code>info</code> <code>debug</code> <code>trace</code></td><td><code>info</code></td></tr><tr><td>log.format</td><td>日志格式化方式。使用<code>json</code>将日志格式化为<code>JSON</code>形式，使用<code>plain</code>将日志格式化为<code>Object#.inspect</code></td><td><code>plain</code></td></tr><tr><td>path.logs</td><td>日志打印位置。</td><td><code>LOGSTASH_HOME/logs</code></td></tr><tr><td>path.plugins</td><td>自定义插件路径。可以指定多次指定多个目录。插件目录结构：<code>PATH/logstash/TYPE/NAME.rb</code>其中<code>TYPE</code>为<code>inputs</code>、<code>filters</code>、<code>outputs</code>或<code>codecs</code>，<code>NAME</code>为插件名称。</td><td>不同平台路径不同。具体参见<a href="https://www.elastic.co/guide/en/logstash/current/dir-layout.html" target="_blank" rel="noopener">Logstash目录结构</a>。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Ops </category>
          
          <category> Log </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Mybatis @Transactional注解事务不生效</title>
      <link href="/2017/08/08/2017-08-08-spring-mybatis-transaction-inoperative.html"/>
      <url>/2017/08/08/2017-08-08-spring-mybatis-transaction-inoperative.html</url>
      
        <content type="html"><![CDATA[<p>最近突然发现用Spring和MyBatis搭建的一个项目，Service报错了，数据仍然可以写入数据库，项目使用的是<code>@Transactional</code>注解声明式事务。配置方式如下：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--transaction config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描@Transactional注解的类定义事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">mode</span>=<span class="string">"proxy"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在Service上使用<code>@Transactional(readonly = true)</code>注解声明这个Service为只读，但是发现方法上没有加<code>@Transactional</code>注解数据可以写入数据库，而且即使报错，数据也可以进库。在确定事务相关的配置，以及数据源、MyBatis相关的配置没有问题之后，依旧没有解决，很是崩溃。</p><p>最后发现，是扫描包冲突了，Spring扫描完Service以后，MVC又扫了一遍。其实这个问题在之前做异步执行的时候，就发现在Service的方法上添加注解<code>@Async</code>不生效，一直是单线程的，各种尝试之后用其他方式暂时解决了，没想到这次还是没逃过这个问题。</p><p>解决方式为：在context.xml里排除扫描Controller类，在mvc里排除Service只扫描Controller，如下：</p><p>spring-context.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"win.wellcoding.service"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"win.wellcoding.controller"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"validator"</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS X下iTerm2安装配置powerline</title>
      <link href="/2017/06/02/2017-06-02-mac-iterm-powerline.html"/>
      <url>/2017/06/02/2017-06-02-mac-iterm-powerline.html</url>
      
        <content type="html"><![CDATA[<p>iTerm2是在Mac下非常好用的一个终端工具，powerline是终端下的一款状态栏工具。</p><a id="more"></a><p>我安装好的效果如下：</p><p><img data-src="/images/powerline_001.png" alt="powerline效果"></p><p>进入正题，powerline需要python支持，查看系统是否安装了python，MacOS X应该是自带了python2的，如果没有安装则可以去官网下载一个安装，或者直接使用brew安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -V</span></span><br><span class="line">Python 2.7.10</span><br></pre></td></tr></table></figure><p>参照官方安装文档，安装powerline很简单，只需要一条命令<code>pip install powerline-status</code>，这里需要有pip支持，如果没有的请使用<code>sudo easy_install pip</code>安装pip，然后安装powerline。但是可能会发现报错，无法安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">copying scripts/powerline -&gt; /System/Library/Frameworks/Python.framework/Versions/2.7/bin</span><br><span class="line">    error: [Errno 1] Operation not permitted: u'/System/Library/Frameworks/Python.framework/Versions/2.7/bin/powerline'</span><br><span class="line"></span><br><span class="line">    ----------------------------------------</span><br><span class="line">Command "/usr/bin/python -u -c "import setuptools, tokenize;__file__='/private/var/folders/lq/vhfk78091v50dwmpfxwm25km0000gn/T/pip-build-d0dFuY/powerline-status/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))" install --record /var/folders/lq/vhfk78091v50dwmpfxwm25km0000gn/T/pip-W24elq-record/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /private/var/folders/lq/vhfk78091v50dwmpfxwm25km0000gn/T/pip-build-d0dFuY/powerline-status/</span><br></pre></td></tr></table></figure><p>就算用sudo 也无法解决，这是因为新系统有个叫SIP的机制(System Integrity Protection)，默认情况下系统启用SIP系统完整性保护机制，无论是对于硬盘还是运行时的进程限制对系统目录的写操作。如果需要继续安装，则需要停止SIP机制，具体做法是：</p><blockquote><p>重启电脑，按住Command+R(直到出现苹果标志)进入Recovery Mode(恢复模式)<br>左上角菜单里找到实用工具 -&gt; 终端<br>输入csrutil disable回车<br>重启Mac即可</p><p>如果想重新启动SIP机制重复上述步骤改用csrutil enable即可</p></blockquote><p>当然这样显得略繁琐了些，而且可能会不安全，还有另一种方式，基于用户的权限来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ~  pip install powerline-status --user -U</span><br></pre></td></tr></table></figure><p>安装完成后打开~/.zshrc，在最后面加上一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. /Users/[用户名]/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> . 后面有个空格。</p><p>接下来打开iTerm，如果报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Users/[用户名]/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh:210: no such file or directory: /Users/[用户名]/Library/Python/2.7/lib/python/site-packages/scripts/powerline-config</span><br><span class="line">/Users/[用户名]/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh:214: no such file or directory: /Users/[用户名]/Library/Python/2.7/lib/python/site-packages/scripts/powerline-config</span><br></pre></td></tr></table></figure><p>则需要将<code>/Users/[用户名]/Library/Python/2.7/bin</code>加入到PATH中，然后打开iTerm2，powerline应该可以正常使用了。剩下的工作就是自定义了。</p>]]></content>
      
      
      <categories>
          
          <category> Tricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data Elasticsearch加Elasticsearch服务实现全文搜索</title>
      <link href="/2017/06/01/2017-06-01-spring-data-elasticsearch.html"/>
      <url>/2017/06/01/2017-06-01-spring-data-elasticsearch.html</url>
      
        <content type="html"><![CDATA[<p>Elasticsearch是一个开源的基于Lucene的搜索服务器，Elasticsearch是使用Java语言开发的，它提供了分布式多用户全文搜索引擎，提供基于RESTful 的API接口。Elasticsearch还提供了一个Java的Client，以及相应的API。</p><p>Spring Data中提供了相应的模块<code>Spring Data Elasticsearch</code>，<code>Spring Data Elasticsearch</code>模块就是基于这个Client实现的。不过不知道出于什么原因，最新版的<code>Spring Data Elasticsearch 2.1.3.RELEASE</code>也仅仅支持到<code>Elasticsearch 2.4</code>版本。本文将使用<code>Spring Data Elasticsearch 2.1.3.RELEASE</code>。</p><a id="more"></a><p>首先添加Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个基础接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> win.wellcoding.elasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.PagingAndSortingRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseSearchRepository</span>&lt;<span class="title">E</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">E</span>, <span class="title">ID</span>&gt;, <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">E</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>spring-context.xml</code>中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">elasticsearch:transport-client</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">cluster-name</span>=<span class="string">"elasticsearch"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cluster-nodes</span>=<span class="string">"127.0.0.1:9300"</span> <span class="attr">client-transport-sniff</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">elasticsearch:repositories</span> <span class="attr">base-package</span>=<span class="string">"win.wellcoding.elasticsearch.repository"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">elasticsearch-template-ref</span>=<span class="string">"elasticsearchTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"elasticsearchTemplate"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.data.elasticsearch.core.ElasticsearchTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"client"</span> <span class="attr">ref</span>=<span class="string">"client"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>cluster-name</code>是Elasticsearch集群名称；<code>cluster-nodes</code>是集群节点，使用的端口是9300而不是RESTful API使用的9200，用英文逗号分割；<code>base-package</code>是扫描包路径，会扫描这个包下的所有类。<strong>注意基础接口类不能在<code>base-package</code>下</strong>。</p><p>然后创建VO以及对应的Repository接口，接口实现不需要写，会生成默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> win.wellcoding.elasticsearch.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"article-index"</span>, type = <span class="string">"article"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">public</span> Long id;</span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.String, searchAnalyzer = <span class="string">"ik_max_word"</span>, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">public</span> String title;</span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.String, searchAnalyzer = <span class="string">"ik"</span>, analyzer = <span class="string">"ik"</span>)</span><br><span class="line">    <span class="keyword">public</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **** Getter and Setter ****</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VO类必须实现<code>Serializable</code>接口，使用<code>@Document</code>注解指定index以及type，Spring Data会在项目启动时检查对应的index和type是否存在，不存在则会创建；使用<code>@Id</code>指定主键字段；为要添加到Elasticsearch中的字段添加<code>@Field</code>注解，指定字段类型以及解析器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> win.wellcoding.elasticsearch.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win.wellcoding.elasticsearch.vo.ArticleVo;</span><br><span class="line"><span class="keyword">import</span> win.wellcoding.elasticsearch.BaseSearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">BaseSearchRepository</span>&lt;<span class="title">ArticleVo</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Service中就可以注入ArticleRepository对象，进行数据写入Elasticsearch、删除、搜索等操作了。</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注入Properties文件中的配置</title>
      <link href="/2017/05/10/2017-05-10-spring-inject-properties.html"/>
      <url>/2017/05/10/2017-05-10-spring-inject-properties.html</url>
      
        <content type="html"><![CDATA[<p>我们都知道Spring可以注入各种对象，而有些时候，我们需要注入一些配置项，而不是一个对象。</p><p>可以发现Spring提供了一个<code>PreferencesPlaceholderConfigurer</code>类，可以方便的让我们使用注解将properties中的配置信息注入到对象中。</p><a id="more"></a><p>具体操作如下：</p><p>创建一个Maven项目，添加Spring Context依赖。</p><p>在Spring上下文的配置文件中声明<code>org.springframework.beans.factory.config.PropertiesFactoryBean</code>和<code>org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer</code>的实例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configProperties"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:*.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">ref</span>=<span class="string">"configProperties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Java代码中使用<code>@Value</code>注解来取值。注意：相应的Java类也需要使用<code>@Service</code>、<code>@Component</code>等声明由Spring管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;configProperties['mysql.url']&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String url;</span><br></pre></td></tr></table></figure><p>注解中的value值<code>#{configProperties['mysql.url']}</code>中的<code>configProperties</code>就是Spring上下文中<code>org.springframework.beans.factory.config.PropertiesFactoryBean</code>的实例ID，<code>mysql.url</code>就是properties中配置的key。</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> properties </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里数据库连接池Druid配置整理，带注释</title>
      <link href="/2017/05/10/2017-05-10-druid.html"/>
      <url>/2017/05/10/2017-05-10-druid.html</url>
      
        <content type="html"><![CDATA[<p>项目数据库连接池准备用Druid，但是网上搜的配置信息都不一样，都比较乱。</p><p>最终在<a href="https://github.com/alibaba/druid/wiki" target="_blank" rel="noopener">官方GitHub文档</a>上找到了各个配置项的说明，整理了一下，留着备忘。</p><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库JDBC驱动</span></span><br><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库链接字符串</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 检测数据库链接是否有效用带SQL，必须配置</span></span><br><span class="line"><span class="meta">jdbc.validationQuery</span>=<span class="string">SELECT 1</span></span><br><span class="line"><span class="comment"># 单位：秒，检测连接是否有效的超时时间。</span></span><br><span class="line"><span class="attr">3</span> <span class="string">底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</span></span><br><span class="line"><span class="meta">jdbc.validationQueryTimeout</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。</span></span><br><span class="line"><span class="comment"># 在mysql下建议关闭。</span></span><br><span class="line"><span class="meta">jdbc.poolPreparedStatements</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。</span></span><br><span class="line"><span class="comment"># 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line"><span class="meta">jdbc.maxPoolPreparedStatementPerConnectionSize</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span></span><br><span class="line"><span class="meta">jdbc.initialSize</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 最大连接池数量</span></span><br><span class="line"><span class="meta">jdbc.maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 已经不再使用，配置了也没效果</span></span><br><span class="line"><span class="comment">#jdbc.maxIdle=20</span></span><br><span class="line"><span class="comment"># 最小连接池数量</span></span><br><span class="line"><span class="meta">jdbc.minIdle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降。</span></span><br><span class="line"><span class="comment"># 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</span></span><br><span class="line"><span class="meta">jdbc.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment"># 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="meta">jdbc.testOnBorrow</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line"><span class="meta">jdbc.testOnReturn</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 建议配置为true，不影响性能，并且保证安全性。</span></span><br><span class="line"><span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line"><span class="meta">jdbc.testWhileIdle</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 1.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span></span><br><span class="line"><span class="comment"># 2.estWhileIdle的判断依据，详细看testWhileIdle属性的说明</span></span><br><span class="line"><span class="meta">jdbc.timeBetweenEvictionRunsMillis</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment"># 不再使用，一个DruidDataSource只支持一个EvictionRun</span></span><br><span class="line"><span class="meta">jdbc.numTestsPerEvictionRun</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment"># 连接保持空闲而不被驱逐的最长时间，即连接的生存时间</span></span><br><span class="line"><span class="meta">jdbc.minEvictableIdleTimeMillis</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment"># 物理连接初始化的时候执行的sql</span></span><br><span class="line"><span class="meta">jdbc.connectionInitSqls</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 当数据库抛出一些不可恢复的异常时，抛弃连接，根据dbType自动识别，不需要配</span></span><br><span class="line"><span class="meta">jdbc.exceptionSorter</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># Druid的强大之处，过滤器属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：</span></span><br><span class="line"><span class="comment"># 监控统计用的filter:stat</span></span><br><span class="line"><span class="comment"># 日志用的filter:log4j</span></span><br><span class="line"><span class="comment"># 防御sql注入的filter:wall</span></span><br><span class="line"><span class="meta">jdbc.filters</span>=<span class="string">filter:wall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链接使用超过时间限制是否回收</span></span><br><span class="line"><span class="meta">jdbc.removeAbandoned</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#超过时间限制时间（单位秒），目前为5分钟，如果有业务处理时间超过5分钟，可以适当调整。</span></span><br><span class="line"><span class="meta">jdbc.removeAbandonedTimeout</span>=<span class="string">300</span></span><br><span class="line"><span class="comment">#链接回收的时候控制台打印信息，测试环境可以加上true，线上环境false。会影响性能。</span></span><br><span class="line"><span class="meta">jdbc.logAbandoned</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>常用数据库validationQuery检查语句</p><table><thead><tr><th style="text-align:left">数据库</th><th style="text-align:left">validationQuery</th></tr></thead><tbody><tr><td style="text-align:left">Oracle</td><td style="text-align:left">select 1 from dual</td></tr><tr><td style="text-align:left">MySQL</td><td style="text-align:left">select 1</td></tr><tr><td style="text-align:left">DB2</td><td style="text-align:left">select 1 from sysibm.sysdummy1</td></tr><tr><td style="text-align:left">MS SQL Server</td><td style="text-align:left">select 1</td></tr><tr><td style="text-align:left">HSQLDB</td><td style="text-align:left">select 1 from INFORMATION_SCHEMA.SYSTEM_USERS</td></tr><tr><td style="text-align:left">PostgreSQL</td><td style="text-align:left">select version()</td></tr><tr><td style="text-align:left">Derby</td><td style="text-align:left">select 1</td></tr><tr><td style="text-align:left">H2</td><td style="text-align:left">select 1</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库连接池 </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 使用@ResponseBody注解返回Json，自定义Key</title>
      <link href="/2017/03/23/2017-03-23-spring-mvc-json.html"/>
      <url>/2017/03/23/2017-03-23-spring-mvc-json.html</url>
      
        <content type="html"><![CDATA[<p>目前我所知道的，使用Spring MVC返回Json数据有三种方式：</p><blockquote><ol><li>配置一个JsonView，需要用到jackson的jar包，是Spring2时代的产物；</li><li>使用json工具将数据序列化成json，然后使用<code>HttpServletResponse</code>直接输出，常用的工具有：gson、fastjson、jackson等；</li><li>利用Spring MVC的注解<code>@ResponseBody</code>注解。</li></ol></blockquote><a id="more"></a><p>今天主要说说第三种方式，用代码说话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/detail"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Computer <span class="title">detail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    computer.setModel(<span class="string">"MacBook Pro"</span>);</span><br><span class="line">    computer.setWeight(<span class="number">1.3</span>);</span><br><span class="line">    computer.setProductionDate(<span class="keyword">new</span> Date(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    computer.setSellingTime(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> computer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的返回结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"model"</span>:<span class="string">"MacBook Pro"</span>,</span><br><span class="line">    <span class="string">"weight"</span>:<span class="number">1.3</span>,</span><br><span class="line">    <span class="string">"productionDate"</span>:<span class="number">61444022400000</span>,</span><br><span class="line">    <span class="string">"sellingTime"</span>:<span class="number">1490257377531</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，现在需求来了。为了节省带宽，需要把json中数据的key使用缩写，但又不影响实体类的使用。</p><p>如果直接修改实体类中的属性名称的话，会试代码维护变得非常艰难，数据拷贝的时候需要写一大堆Setter和Getter，代码可读性大大下降。</p><p>大家都知道，使用Gson等序列化工具时，可以使用<code>@SerializedName</code>注解，为属性指定序列化时的名称，那么这里使用<code>@SerializedName</code>注解可以做到吗？答案肯定是不行的。但是jackson包为我们提供了类似的注解<code>@JsonProperty</code>，使用方法和<code>@SerializedName</code>完全一样，只需要给实体类中所有的属性添加相应的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"m"</span>)</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"pd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date productionDate;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"st"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date sellingTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//****** getters and setters *****</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"m"</span>:<span class="string">"MacBook Pro"</span>,</span><br><span class="line">    <span class="string">"w"</span>:<span class="number">1.3</span>,</span><br><span class="line">    <span class="string">"pd"</span>:<span class="number">61444022400000</span>,</span><br><span class="line">    <span class="string">"st"</span>:<span class="number">1490258203258</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的时候，是将时间转成了毫秒数，这就需要前台或者其他调用者做进一步处理，一般都是在序列化的时候将时间属性格式化后再输出。生产日期<code>productionDate</code>应该只到日，不应该再有<code>00:00:00</code>输出了，而售出时间<code>sellingTime</code>则需要精确到秒。我们可以自行定义序列化和反序列化方式，分别继承抽象类<code>JsonSerializer</code>和<code>JsonDeserializer</code>，并实现其中的抽象方法，然后在相应的字段上添加注解<code>@JsonSerialize(using = DateSerializer.class)</code>指定我们定义的类就OK了。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化是将时间格式化为 yyyy-MM-dd 形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(<span class="keyword">final</span> Date date,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">final</span> JsonGenerator jsonGenerator,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">final</span> SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString((<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)).format(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化是将时间格式化为 yyyy-MM-dd HH:mm:ss 形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(<span class="keyword">final</span> Date date,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">final</span> JsonGenerator jsonGenerator,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">final</span> SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString((<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>))</span><br><span class="line">            .format(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在相应的实体类的属性上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"m"</span>)</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"pd"</span>)</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = DateSerializer<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Date</span> <span class="title">productionDate</span></span>;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"st"</span>)</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = DateTimeSerializer<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Date</span> <span class="title">sellingTime</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//****** getters and setters *****</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"m"</span>:<span class="string">"MacBook Pro"</span>,</span><br><span class="line">    <span class="string">"w"</span>:<span class="number">1.3</span>,</span><br><span class="line">    <span class="string">"pd"</span>:<span class="string">"2017-01-01"</span>,</span><br><span class="line">    <span class="string">"st"</span>:<span class="string">"2017-03-23 17:52:41"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，jackson提供的不止这些，比如：<code>@JsonIgnore</code>、<code>@JsonPropertyOrder</code>等，都是非常实用的。</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
          <category> Coding </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
